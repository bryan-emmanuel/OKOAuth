apply plugin: 'com.android.library'

version = "1.0"

android {
    compileSdkVersion 22
    buildToolsVersion "22.0.1"

    defaultConfig {
        minSdkVersion 14
        targetSdkVersion 22
        versionCode 1
        versionName "${project.version}"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    compile 'com.android.support:support-annotations:+'
    compile 'com.squareup.okhttp:okhttp:2.4.0'

    testCompile 'junit:junit:4.12'
    testCompile 'org.assertj:assertj-core:1.6.1'
    testCompile 'org.powermock:powermock-module-junit4:1.6.2'
    testCompile 'org.powermock:powermock-api-mockito:1.6.2'
    testCompile 'org.powermock:powermock-mockito-release-full:1.6.2'
}

apply plugin: 'maven-publish'

publishing {
    publications {
        "${rootProject.name}"(MavenPublication) {
            groupId "com.piusvelte.okoauth"
            version project.version
            artifactId rootProject.name

            artifact("$buildDir/outputs/aar/${project.name}-release.aar")

            // include dependencies
            pom.withXml {
                asNode().appendNode('name', "${rootProject.name}")
                asNode().appendNode('description', 'OAuth 1.0(a) using OKHttp')
                asNode().appendNode('url', 'https://github.com/piusvelte/OKOAuth')

                def license = asNode().appendNode('licenses').appendNode('license')
                license.appendNode('name', 'The Apache License, Version 2.0')
                license.appendNode('url', 'http://www.apache.org/licenses/LICENSE-2.0.txt')

                def developer = asNode().appendNode('developers').appendNode('developer')
                developer.appendNode('name', 'Bryan Emmanuel')
                developer.appendNode('email', 'piusvelte@gmail.com')
                developer.appendNode('organization')
                developer.appendNode('organizationUrl')

                def scm = asNode().appendNode('scm')
                scm.appendNode('connection', 'scm:git:git@github.com:piusvelte/OKOAuth.git')
                scm.appendNode('developerConnection', 'scm:git:git@github.com:piusvelte/OKOAuth.git')
                scm.appendNode('url', 'git@github.com:piusvelte/OKOAuth.git')

                def dependenciesNode = asNode().appendNode('dependencies')
                project.configurations.compile.allDependencies.each { dep ->
                    // fabric returns null for these values, so skip it
                    if (dep.group?.trim() && dep.name?.trim() && dep.version?.trim()) {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', dep.group)
                        dependencyNode.appendNode('artifactId', dep.name)
                        dependencyNode.appendNode('version', dep.version)

                        if (dep.group.equals('com.mopub.sdk.android')) {
                            dependencyNode.appendNode('classifier', 'open-source')
                            dependencyNode.appendNode('type', 'aar')
                            dependencyNode.appendNode('scope', 'provided')
                        } else if (dep.group.equals('com.android.support')) {
                            dependencyNode.appendNode('scope', 'provided')
                        }
                    }
                }
            }
        }
    }

    repositories {
    }
}
